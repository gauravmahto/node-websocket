{"version":3,"file":"functions.js","sourceRoot":"c:/Users/Gaurav/Desktop/pilot-projetcs/node-websocket/src/","sources":["src/libs/utils/functions.ts"],"names":[],"mappings":";;;;;AAIA,4CAAoB;AACpB,gDAAwB;AAaxB,sBAA6B,IAAY,EAAE,IAAc;IAEvD,IAAI,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;IAEpB,MAAM,YAAY,GAAa;QAC7B,GAAG,EAAE,SAAS;QACd,GAAG,EAAE,SAAS;KACf,CAAC;IAEF,MAAM,SAAS,GAAuB,IAAI,CAAC,IAAI,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAE5F,EAAE,CAAC,CAAC,OAAO,SAAS,KAAK,WAAW,CAAC,CAAC,CAAC;QAErC,MAAM,YAAY,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE1C,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAE9B,YAAY,CAAC,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YACnC,YAAY,CAAC,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;QAErC,CAAC;IAEH,CAAC;IAED,MAAM,CAAC,YAAY,CAAC;AAEtB,CAAC;AA1BD,oCA0BC;AAOD,uBAA8B,OAAe;IAE3C,IAAI,CAAC;QACH,MAAM,CAAC,YAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IAC5C,CAAC;IAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACb,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;AAEH,CAAC;AARD,sCAQC;AAOD,sBAA6B,UAAkB;IAE7C,MAAM,OAAO,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAEzC,EAAE,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,YAAY,CAAC,OAAO,CAAC,CAAC;IACtB,YAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AAExB,CAAC;AAXD,oCAWC","sourcesContent":["/**\r\n * Copyright 2018 - Author gauravm.git@gmail.com\r\n */\r\n\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nexport interface Argument {\r\n\r\n  arg: string | undefined;\r\n  val: string | undefined;\r\n\r\n}\r\n\r\n// Get the arguments and it's values.\r\n// For e.g: src=abc\r\n// Call: getArgKeyVal('src')\r\n// Returns: { arg: src, val: abc }\r\nexport function getArgKeyVal(name: string, args: string[]): Argument {\r\n\r\n  name = (name + '=');\r\n\r\n  const argKeyValObj: Argument = {\r\n    arg: undefined,\r\n    val: undefined\r\n  };\r\n\r\n  const argKeyVal: string | undefined = args.find((arg: string) => (arg.indexOf(name) === 0));\r\n\r\n  if (typeof argKeyVal !== 'undefined') {\r\n\r\n    const argKeyValArr = argKeyVal.split('=');\r\n\r\n    if (argKeyValArr.length === 2) {\r\n\r\n      argKeyValObj.arg = argKeyValArr[0];\r\n      argKeyValObj.val = argKeyValArr[1];\r\n\r\n    }\r\n\r\n  }\r\n\r\n  return argKeyValObj;\r\n\r\n}\r\n\r\n/**\r\n * Determines if a directory exists\r\n * @param dirPath Path to test\r\n * @return True if it exists otherwise false.\r\n */\r\nexport function dirExistsSync(dirPath: string): boolean {\r\n\r\n  try {\r\n    return fs.statSync(dirPath).isDirectory();\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Creates path to target if it does not exist\r\n * @param targetPath The target path\r\n * @return Returns boolean true if found otherwise creates the dirs recursively.\r\n */\r\nexport function makePathSync(targetPath: string): boolean | void {\r\n\r\n  const dirname = path.dirname(targetPath);\r\n\r\n  if (dirExistsSync(dirname)) {\r\n    return true;\r\n  }\r\n\r\n  makePathSync(dirname);\r\n  fs.mkdirSync(dirname);\r\n\r\n}\r\n"]}