{"version":3,"file":"logger.js","sourceRoot":"c:/Users/Gaurav/Desktop/pilot-projetcs/node-websocket/src/","sources":["src/libs/utils/logger.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,gDAAwB;AAExB,oDAA4B;AAC5B,iDAAmC;AACnC,qCAAmC;AAEnC,mCAAmC;AAEnC,2CAA2C;AAE3C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AAC5D,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;IAChC,SAAS,CAAC,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,gBAAM,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAC7E,CAAC;AACD,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IAC7B,SAAS,CAAC,IAAI,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,gBAAM,EAAE,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAC1E,CAAC;AAED,MAAM,UAAU,GAAgC,EAAE,CAAC;AACnD,IAAI,MAA8B,CAAC;AAmC1B,wBAAM;AAhCf,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAEnB,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC;IAGlC,UAAU,CAAC,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAC7C,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;IAEvC,UAAU,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IAG1C,wBAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAElC,UAAU,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;AAEtE,CAAC;AAGD,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IAGtB,SAAS,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IACjD,UAAU,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;AAErE,CAAC;AAGD,iBAAA,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC;IAC1B,UAAU,EAAE,UAAU;CACvB,CAAC,CAAC;AACH,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,IAAI,OAAO,CAAC","sourcesContent":["/**\r\n * Copyright 2018 - Author gauravm.git@gmail.com\r\n */\r\n\r\n// Description:\r\n// This is a default logger.\r\n// The intention is to provide a file and console based logger that should be used instead of 'console.log'.\r\n\r\nimport path from 'path';\r\n\r\nimport moment from 'moment';\r\nimport * as winston from 'winston';\r\nimport 'winston-daily-rotate-file';\r\n\r\nimport { appConfig } from 'config';\r\n\r\nimport { makePathSync } from './functions';\r\n\r\nconst logConfig = JSON.parse(JSON.stringify(appConfig.log));\r\nif (logConfig.console.timestamp) {\r\n  logConfig.console.timestamp = () => moment().format('DD-MM-YYYY HH:mm:ss');\r\n}\r\nif (logConfig.file.timestamp) {\r\n  logConfig.file.timestamp = () => moment().format('DD-MM-YYYY HH:mm:ss');\r\n}\r\n\r\nconst transports: winston.TransportInstance[] = [];\r\nlet logger: winston.LoggerInstance;\r\n\r\n// Add file based logger transport.\r\nif (logConfig.file) {\r\n\r\n  const fileConfig = logConfig.file;\r\n\r\n  // Make path relative to the root dir.\r\n  fileConfig.filename = path.join(global.DATA_DIR,\r\n    fileConfig.dir, fileConfig.filename);\r\n  // Apply default transport label.\r\n  fileConfig.label = process.pid.toString();\r\n\r\n  // Make path to log file.\r\n  makePathSync(fileConfig.filename);\r\n\r\n  transports.push(new winston.transports.DailyRotateFile(fileConfig));\r\n\r\n}\r\n\r\n// Add console based logger transport.\r\nif (logConfig.console) {\r\n\r\n  // Apply default transport label.\r\n  logConfig.console.label = process.pid.toString();\r\n  transports.push(new winston.transports.Console(logConfig.console));\r\n\r\n}\r\n\r\n// Create a new logger instance.\r\nlogger = new winston.Logger({\r\n  transports: transports\r\n});\r\nlogger.level = logConfig.level || 'debug';\r\n\r\nexport { logger };\r\n"]}